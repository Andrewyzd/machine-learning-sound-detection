# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Heart_Sound_Results_System.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from Segmentation_FeaturesExtract import Segmentation, FeaturesExtraction
from PyQt5.QtWidgets import*
from PyQt5.QtGui import*
from PyQt5.QtCore import*
from threading import *
from PyQt5.uic import loadUi
from tensorflow import keras
from firebase import firebase
from datetime import datetime
import librosa, librosa.display
import matplotlib.pyplot as plt
import numpy as np
import urllib.request
import time
import Diseases_Data as dd
import pandas as pd
import pyqtgraph as pg
import json
import sys

class ResultActivity(QMainWindow):
    """
    A class for Result window GUI

    ...

    Attributes
    ----------
    audio_signal : ndarray
        The signal to be processed
    isRealTime : boolean
        The identifier to identify between real-time and audio file process
    information_collection : alist
        The information of the login user

    Methods
    -------
    applyButtonNewStyle()
        Change the style of the button of the navigated page
    defaultButtonStyle()
        Design the default style of the button
    probabilityLabelDesign()
        Design the label of the probability
    squeeze()
        Squeeze or reside the side bar menu
    pageSignalGraph()
        Shift or display the signal graph page
    pagePotentialDisease()
        Shift or display the potential disease page
    pageFeatureValue()
        Shift or display the features value of the analysed signal
    pageHistoryRecord()
        Shift or display the diagnosed history record
    designGraphLabel()
        Design the labeling of the graph
    designGraph()
        Design the graph
    plotGraph()
        Plot the signal
    clearSignalIllustration(identifier)
        Matplotlib API
    ExtractedFeatures(features_name, features_value)
        Extract the features of the signal
    historyList()
        List the denoised history record
    savingDiagnosedData()
        Save the denoised result
    progressBarDesign(probability)
        Design the progress bar for each probability of the heart sound
    diseasesTableDesign()
        Design the report of the potential disease table
    shadowEffect(objectName)
        Design the shadow effect of the system
    """
    def __init__(self, audio_signal, isRealTime, information_collection):
        """
        Parameters
        ----------
        audio_signal : ndarray
            The signal to be processed
        isRealTime : boolean
            The identifier to identify between real-time and audio file process
        information_collection : alist
            The information of the login user
            
        Attributes
        ----------
        normal_prob : float
            The predicted probability value for normal heart sound
        murmur_prob : float
            The predicted probability value for murmur heart sound
        extrasystole_prob : float
            The predicted probability value for extrasystole heart sound
        exhs_prob : float
            The predicted probability value for extra heart sound
        predicted_result : str
            The final result of the heart sound status
        denoised_signal : ndarray
            The denoised signal
        normalized_signal : ndarray
            The normalized signal
        shannon_envelope : ndarray
            The Shannon envelope 
        segmented_signal : ndarray
            The segmented signal
        clean_segmented_signal : ndarray
            The cleaned signal after the segmentation
        sample_rate : int
            The sample per rate of the signal
        """
        super().__init__()
        self.audio_signal= audio_signal
        self.isRealTime = isRealTime
        self.information_collection = information_collection
        self.normal_prob = 0
        self.murmur_prob = 0
        self.extrasystole_prob = 0
        self.exhs_prob = 0
        self.predicted_result = "None"
        self.denoised_signal = 0
        self.normalized_signal = 0
        self.shannon_envelope = 0
        self.segmented_signal = 0
        self.clean_segmented_signal = 0
        self.sample_rate = 0
        #Reading the ui file of the GUI layout design
        loadUi("Heart_Sound_Results_System.ui",self)
        #set the title of the window
        self.setWindowTitle("Viewing Result")
        #design the default button style
        self.defaultButtonStyle()
        #disable the visibility of the table widget
        self.tableWidget_disease.setVisible(False)
        #Load and resize the image 
        oImage = QImage("Icon/Medicine-amico.png")
        sImage = oImage.scaled(QSize(350,400)) 
        self.label_image.setPixmap(QtGui.QPixmap(sImage))
        oImage = QImage("Icon/Pharmacist-amico.png")
        sImage = oImage.scaled(QSize(300,300))
        self.label_titleImage.setPixmap(QtGui.QPixmap(sImage))
        self.label_titleImage.setStyleSheet("background-color: rgba(174,214,241,100%);" +
                                            "padding-left: 150px;")

        oImage = QImage("Icon/heart_connect.png")
        self.label_bottomBackground.setPixmap(QtGui.QPixmap(oImage))
        self.label_bottomBackground.setStyleSheet("background-color: rgba(0,0,0,0%);")
        self.label_bottomBackground.setAlignment(Qt.AlignCenter)
        oImage = QImage("Icon/heart.png")
        sImage = oImage.scaled(QSize(250,450))
        self.label_heartImage.setPixmap(QtGui.QPixmap(sImage))
        self.label_heartImage.setAlignment(Qt.AlignCenter)
        #design the labeling of the graph
        self.designGraphLabel()
        #design the graph
        self.designGraph()
        #plot the graph
        self.plotGraph()
        #design the labeling of the probability progress bar
        self.probabilityLabelDesign()
        #design the labeling of the history header
        self.label_historyheader.setText("Passed Diagnosis Record")
        self.label_historyheader.setStyleSheet("QLabel{ background-color: rgba(0, 0, 0, 0%);" +
                                                'font: 75 20pt "MS Shell Dlg 2"; ' +
                                                "color:#154360;}")
        #add the shadow effect to table list of hiistory record, feature values, and potential disease 
        self.shadowEffect(self.listWidget_historyList)
        self.shadowEffect(self.listWidget_featureList)
        self.shadowEffect(self.tableWidget_disease)
        #extract the information of the user
        #The information include name, age, gender, weight, and height
        name = self.information_collection[0] + " " + self.information_collection[1] 
        age = str(self.information_collection[2])
        gender = self.information_collection[3]
        weight = str(self.information_collection[4]) + "kg"
        height = str(self.information_collection[5]) + "cm"
        #set the information of the user to the text labels 
        self.label_details.setText("Name: " + name +"\n"+ "Age: "+age+"\n"+"Gender: "+gender+"\n"+"Weight: "+weight+"\n"+"Height: "+height)

        self.label_details.setStyleSheet("QLabel{ background-color: rgba(0, 0, 0, 0%);" +
                                                'font:18pt "Sitka Text"; ' +
                                                "color:#3498DB;}")
        self.label_details.setAlignment(Qt.AlignRight)
        #Link the button to the method for respective functionality
        self.pushButton_potentialDisease.clicked.connect(self.pagePotentialDisease)
        self.pushButton_signalAnalysisResult.clicked.connect(self.pageSignalGraph)
        self.pushButton_features.clicked.connect(self.pageFeatureValue)
        self.pushButton_history.clicked.connect(self.pageHistoryRecord)
        self.pushButton_resize.clicked.connect(self.squeeze)
        self.pushButton_detailsDenoiseSignal.clicked.connect(lambda: self.clearSignalIllustration(0))
        self.pushButton_detailsNormalizedSignal.clicked.connect(lambda: self.clearSignalIllustration(1))
        self.pushButton_detailsShannonEnvelope.clicked.connect(lambda: self.clearSignalIllustration(2))
        self.pushButton_detailsS1S2Signal.clicked.connect(lambda: self.clearSignalIllustration(3))
        self.pushButton_detailsCleanSignal.clicked.connect(lambda: self.clearSignalIllustration(4))
        #Change of design of the button according to the called button
        for i in self.frame_left_menu.findChildren(QPushButton):
            i.clicked.connect(self.applyButtonNewStyle)

        self.showMaximized()#shows the window in full screen

    def applyButtonNewStyle(self):
        """
        Change of design of the clicked button of each different page respectively
        """
        #change the button design according to the current navigated page
        #Index 0 is the first page (Signal Analysis Page)
        if self.stackedWidget.currentIndex() == 0:
            self.defaultButtonStyle()
            self.sender().setStyleSheet("QPushButton { border-radius: 10px;" +
                                                       "border-left: 5px solid rgb(0, 255, 253);" +
                                                       "border-bottom: 5px solid rgb(0, 255, 253);" +
                                                       'font: 75 10pt "MS Shell Dlg 2"; ' +
                                                       "color:#A6ACAF;" +
                                                       "padding-left: 60px;" +
                                                       "background-image: url('Icon/analysis_nonhover.png');" +
                                                       "background-repeat: no-repeat;" +
                                                       "height: 60px;}" +
                                                       "QPushButton:hover{ background-image:url('Icon/analysis_hover.png');" +
                                                       "background-repeat: no-repeat;" +
                                                       "color:#03F9FE;" +
                                                       "background-color: #283747;}")
        #Index 1 is the second page (Features Page)    
        if self.stackedWidget.currentIndex() == 1:
            self.defaultButtonStyle()
            self.sender().setStyleSheet("QPushButton { border-radius: 10px;" +
                                                       "border-left: 5px solid rgb(0, 255, 253);" +
                                                       "border-bottom: 5px solid rgb(0, 255, 253);" +
                                                       'font: 75 10pt "MS Shell Dlg 2"; ' +
                                                       "color:#A6ACAF;" +
                                                       "padding-left: 60px;" +
                                                       "background-image: url('Icon/feature_nonhover.png');" +
                                                       "background-repeat: no-repeat;" +
                                                       "height: 60px;}" +
                                                       "QPushButton:hover{ background-image:url('Icon/feature_hover.png');" +
                                                       "background-repeat: no-repeat;" +
                                                       "color:#03F9FE;" +
                                                       "background-color: #283747;}")            
        #Index 2 is the third page (Potential disease Page)
        if self.stackedWidget.currentIndex() == 2:
            self.defaultButtonStyle()
            self.sender().setStyleSheet("QPushButton { padding: 10px;" +
                                                       "border-radius: 10px;" +
                                                       "border-left: 5px solid rgb(0, 255, 253);" +
                                                       "border-bottom: 5px solid rgb(0, 255, 253);" +
                                                       'font: 75 10pt "MS Shell Dlg 2"; '+
                                                       "color:#A6ACAF;" +
                                                       "padding-left: 80px;" +
                                                       "background-image: url('Icon/potential_nonhover.png');" +
                                                       "background-repeat: no-repeat;" +
                                                       "height: 40px;}" +
                                                       "QPushButton:hover{background-image:url('Icon/potential_hover.png');" +
                                                       "background-repeat: no-repeat;" +
                                                       "color:#03F9FE;" +
                                                       "background-color: #283747;}")
            #Initialize the thread classes for each progress bar of different heart sounds 
            normal = normal_prob(self.normal_prob,self.progressBar_normal)
            murmur = murmur_prob(self.murmur_prob,self.progressBar_murmur)
            extrasystole = extrasystole_prob(self.extrasystole_prob,self.progressBar_extrasystole)
            exhs = exhs_prob(self.exhs_prob,self.progressBar_exhs)
            #Execute the thread classes
            normal.run()
            time.sleep(0.5)#sleep for 0.5 seconds
            murmur.run()
            time.sleep(0.5)#sleep for 0.5 seconds
            extrasystole.run()
            time.sleep(0.5)#sleep for 0.5 seconds
            exhs.run()
            time.sleep(0.5)#sleep for 0.5 seconds

            #Set the final predicted heart sound result to label
            self.label_resultHeartSound.setText("Diagnosed Sound : " + self.predicted_result)
            #Set the labelling colour to green if the result is normal heart sound, otherwise set to red colour
            if self.predicted_result == 'normal':                
                self.label_resultHeartSound.setStyleSheet("QLabel{background-color: #58D68D;" +
                                                          "border-radius: 10px;" +
                                                          "border-style: 10px solid #58D68D;" +
                                                          'font: 75 16pt "MS Shell Dlg 2"; ' +
                                                          "color:#145A32;}")
            else:
                self.label_resultHeartSound.setStyleSheet("QLabel{background-color: #EC7063;" +
                                                          "border-radius: 10px;" +
                                                          "border-style: 10px solid #EC7063;" +
                                                          'font: 75 16pt "MS Shell Dlg 2"; ' +
                                                          "color:#78281F;}")
            #Change the alignment to center
            self.label_resultHeartSound.setAlignment(Qt.AlignCenter)
            #Provides the tips of prevention if the result is normal heart sound, otherwise potential diseases are provided
            if self.predicted_result == 'normal':
                self.label_tableTitle.setText("Tips of Preventing from Heart Diseases")
                self.label_tableTitle.setStyleSheet("QLabel{ background-color: rgba(0, 0, 0, 0%);" +
                                                'font: 75 16pt "MS Shell Dlg 2"; ' +
                                                "color:#2ECC71;}")
            else:
                self.label_tableTitle.setText("List of Potential Diseases")
                self.label_tableTitle.setStyleSheet("QLabel{ background-color: rgba(0, 0, 0, 0%);" +
                                                'font: 75 16pt "MS Shell Dlg 2"; ' +
                                                "color:#E74C3C;}")
            #Change the alignment to center
            self.label_tableTitle.setAlignment(Qt.AlignCenter)
            #Enable the visibility of the table
            self.tableWidget_disease.setVisible(True)


        #Index 3 is the fourth page (History record page)
        if self.stackedWidget.currentIndex() == 3:
            self.defaultButtonStyle()
            self.sender().setStyleSheet("QPushButton { border-radius: 10px;" +
                                                       "border-left: 5px solid rgb(0, 255, 253);" +
                                                       "border-bottom: 5px solid rgb(0, 255, 253);" +
                                                       'font: 75 10pt "MS Shell Dlg 2"; ' +
                                                       "color:#A6ACAF;" +
                                                       "padding-left: 60px;" +
                                                       "background-image: url('Icon/history_nonhover.png');" +
                                                       "background-repeat: no-repeat;" +
                                                       "height: 60px;}" +
                                                       "QPushButton:hover{ background-image:url('Icon/history_hover.png');" +
                                                       "background-repeat: no-repeat;" +
                                                       "color:#03F9FE;" +
                                                       "background-color: #283747;}")
            
    def defaultButtonStyle(self):
        """
        Design the buttons of the initial stage
        """
        #Design button for potential disease page
        self.pushButton_potentialDisease.setStyleSheet("QPushButton { padding: 10px;" +
                                                       "border-radius: 10px;" +
                                                       'font: 75 10pt "MS Shell Dlg 2"; '+
                                                       "color:#A6ACAF;" +
                                                       "padding-left: 80px;" +
                                                       "background-image: url('Icon/potential_nonhover.png');" +
                                                       "background-repeat: no-repeat;" +
                                                       "height: 40px;}" +
                                                       "QPushButton:hover{background-image:url('Icon/potential_hover.png');" +
                                                       "background-repeat: no-repeat;" +
                                                       "color:#03F9FE;" +
                                                       "background-color: #283747;}")
        #Design button for signal analysis page
        self.pushButton_signalAnalysisResult.setStyleSheet("QPushButton { border-radius: 10px;" +
                                                       'font: 75 10pt "MS Shell Dlg 2"; ' +
                                                       "color:#A6ACAF;" +
                                                       "padding-left: 60px;" +
                                                       "background-image: url('Icon/analysis_nonhover.png');" +
                                                       "background-repeat: no-repeat;" +
                                                       "height: 60px;}" +
                                                       "QPushButton:hover{ background-image:url('Icon/analysis_hover.png');" +
                                                       "background-repeat: no-repeat;" +
                                                       "color:#03F9FE;" +
                                                       "background-color: #283747;}")
        #Design button for festures page
        self.pushButton_features.setStyleSheet("QPushButton { border-radius: 10px;" +
                                                       'font: 75 10pt "MS Shell Dlg 2"; ' +
                                                       "color:#A6ACAF;" +
                                                       "padding-left: 60px;" +
                                                       "background-image: url('Icon/feature_nonhover.png');" +
                                                       "background-repeat: no-repeat;" +
                                                       "height: 60px;}" +
                                                       "QPushButton:hover{ background-image:url('Icon/feature_hover.png');" +
                                                       "background-repeat: no-repeat;" +
                                                       "color:#03F9FE;" +
                                                       "background-color: #283747;}")
        #Design button for history record
        self.pushButton_history.setStyleSheet("QPushButton { border-radius: 10px;" +
                                                       'font: 75 10pt "MS Shell Dlg 2"; ' +
                                                       "color:#A6ACAF;" +
                                                       "padding-left: 60px;" +
                                                       "background-image: url('Icon/history_nonhover.png');" +
                                                       "background-repeat: no-repeat;" +
                                                       "height: 60px;}" +
                                                       "QPushButton:hover{ background-image:url('Icon/history_hover.png');" +
                                                       "background-repeat: no-repeat;" +
                                                       "color:#03F9FE;" +
                                                       "background-color: #283747;}")
        #Design butto for resizing the side menu
        self.pushButton_resize.setStyleSheet("QPushButton{border-radius: 20px;" +
                                             "border-style: outset;" +
                                             "image: url('Icon/resize_nonhover.png');" +
                                             "background-repeat: no-repeat;}" +
                                             "QPushButton:hover{ image:url('Icon/resize_hover.png');" +
                                             "background-repeat: no-repeat;}")
        #Design button for matplotlib API of denoised signal
        self.pushButton_detailsDenoiseSignal.setStyleSheet("QPushButton{color:#2874A6;" +
                                                          "padding: 10px;" +
                                                          'font: 12pt "Nirmala UI";' +
                                                          "border-style : solid;" +
                                                          "border-radius: 10px;" +
                                                          "background-color: rgba(174, 214, 241,40%);}" +
                                                          "QPushButton:hover{background-color : #2874A6;" +
                                                          "color: white;}")
        #Design button for matplotlib API of normalized signal
        self.pushButton_detailsNormalizedSignal.setStyleSheet("QPushButton{color:#2874A6;" +
                                                          "padding: 10px;" +
                                                          'font: 12pt "Nirmala UI";' +
                                                          "border-style : solid;" +
                                                          "border-radius: 10px;" +
                                                          "background-color: rgba(174, 214, 241,40%);}" +
                                                          "QPushButton:hover{background-color : #2874A6;" +
                                                          "color: white;}")
        #Design button for matplotlib API of Shannon Envelope
        self.pushButton_detailsShannonEnvelope.setStyleSheet("QPushButton{color:#2874A6;" +
                                                          "padding: 10px;" +
                                                          'font: 12pt "Nirmala UI";' +
                                                          "border-style : solid;" +
                                                          "border-radius: 10px;" +
                                                          "background-color: rgba(174, 214, 241,40%);}" +
                                                          "QPushButton:hover{background-color : #2874A6;" +
                                                          "color: white;}")
        #Design button for matplotlib API of S1 (lub) and S2 (dub) signal
        self.pushButton_detailsS1S2Signal.setStyleSheet("QPushButton{color:#2874A6;" +
                                                          "padding: 10px;" +
                                                          'font: 12pt "Nirmala UI";' +
                                                          "border-style : solid;" +
                                                          "border-radius: 10px;" +
                                                          "background-color: rgba(174, 214, 241,40%);}" +
                                                          "QPushButton:hover{background-color : #2874A6;" +
                                                          "color: white;}")
        #Design button for matplotlib API of cleaned signal
        self.pushButton_detailsCleanSignal.setStyleSheet("QPushButton{color:#2874A6;" +
                                                          "padding: 10px;" +
                                                          'font: 12pt "Nirmala UI";' +
                                                          "border-style : solid;" +
                                                          "border-radius: 10px;" +
                                                          "background-color: rgba(174, 214, 241,40%);}" +
                                                          "QPushButton:hover{background-color : #2874A6;" +
                                                          "color: white;}")

    def probabilityLabelDesign(self):
        """
        Design the labelling of each progress bar  
        """
        #Design the header labeling
        self.label_probability.setText("Predicted Probability Result")
        self.label_probability.setStyleSheet("background-color: rgba(0,0,0,0%);" +
                                             'font: 16pt "Sitka Text";' +
                                             "color:#B03A2E;")
        #Set alignment to center
        self.label_probability.setAlignment(Qt.AlignCenter)

        #Design the label of normal sound
        self.label_normalProbability.setText("Normal Sound")
        self.label_normalProbability.setStyleSheet("background-color: rgba(0,0,0,0%);" +
                                             'font: 10pt "Sitka Text";' +
                                             "color:#A93226;")
        #Design the label of murmur sound
        self.label_murmurProbability.setText("Murmur Sound")
        self.label_murmurProbability.setStyleSheet("background-color: rgba(0,0,0,0%);" +
                                             'font: 10pt "Sitka Text";' +
                                             "color:#A93226;")
        #Design the label of extrasystole sound
        self.label_extrasystoleProbability.setText("Extrasystole Sound")
        self.label_extrasystoleProbability.setStyleSheet("background-color: rgba(0,0,0,0%);" +
                                             'font: 10pt "Sitka Text";' +
                                             "color:#A93226;")
        #Design the label of extra heart sound
        self.label_exhsProbability.setText("Extra Heart Sound")
        self.label_exhsProbability.setStyleSheet("background-color: rgba(0,0,0,0%);" +
                                             'font: 10pt "Sitka Text";' +
                                             "color:#A93226;")
        
    
    def squeeze(self):
        """
        Resize the sise menu navigation bar
        """
        current_width = self.frame_left_menu.width()
        #Change the width of side menu bar to 260 if current size is 90, otherwise change to 90 
        if (current_width == 90):
            new_width = 260
            #Label the button accordingly
            self.pushButton_signalAnalysisResult.setText("Analysis Signal")
            self.pushButton_potentialDisease.setText("Potential Diseases")
            self.pushButton_features.setText("Features Values")
            self.pushButton_history.setText("History Record")
        else:
            new_width = 90
            self.pushButton_signalAnalysisResult.setText("")
            self.pushButton_potentialDisease.setText("")
            self.pushButton_features.setText("")
            
        #Animate the transition
        self.animation = QPropertyAnimation(self.frame_left_menu, b"minimumWidth")
        self.animation.setDuration(250)
        self.animation.setStartValue(current_width)
        self.animation.setEndValue(new_width)
        self.animation.setEasingCurve(QtCore.QEasingCurve.InOutQuart)
        self.animation.start()

    def pageSignalGraph(self):
        """
        Navigate to signal analysis page (Page 1)
        """
        self.stackedWidget.setCurrentWidget(self.page_signalAnalysis)

    def pageFeatureValue(self):
        """
        Navigate to signal features page (Page 2)
        """
        self.stackedWidget.setCurrentWidget(self.page_signalFeature)

    def pagePotentialDisease(self):
        """
        Navigate to potential disease page (Page 3)
        """
        self.stackedWidget.setCurrentWidget(self.page_potentialDiseases)

    def pageHistoryRecord(self):
        """
        Navigate to history record page (Page 4)
        """
        self.stackedWidget.setCurrentWidget(self.page_DiagnosedHistory)

    def designGraphLabel(self):
        """
        Design the labeling of each signal graph
        """
        #Label of denoised signal
        self.label_denoisedSignal.setText("Denoised\nSignal")
        self.label_denoisedSignal.setStyleSheet("background-color: rgba(0,0,0,0%);" +
                                                'font: 12pt "Sitka Text";' +
                                                "color:#0E6251;")
        #Set the alignment to center
        self.label_denoisedSignal.setAlignment(Qt.AlignCenter)

        #Label of normalzed signal
        self.label_normalizedSignal.setText("Normalized\nSignal")
        self.label_normalizedSignal.setStyleSheet("background-color: rgba(0,0,0,0%);" +
                                                  'font: 12pt "Sitka Text";' +
                                                  "color:#0E6251;")
        #Set the alignment to center
        self.label_normalizedSignal.setAlignment(Qt.AlignCenter)

        #Label of Shannon envelope
        self.label_ShannonEnvelope.setText("Shannon Energy\nEnvelope")
        self.label_ShannonEnvelope.setStyleSheet("background-color: rgba(0,0,0,0%);" +
                                                 'font: 12pt "Sitka Text";' +
                                                 "color:#0E6251;")
        #Set the alignment to center
        self.label_ShannonEnvelope.setAlignment(Qt.AlignCenter)

        #Label of S1 (lub) and S2 (dub) sound
        self.label_locateS1S2.setText("lub and dub\nSignal")
        self.label_locateS1S2.setStyleSheet("background-color: rgba(0,0,0,0%);" +
                                            'font: 12pt "Sitka Text";' +
                                            "color:#0E6251;")
        #Set the alignment to center
        self.label_locateS1S2.setAlignment(Qt.AlignCenter)

        #Label of clean signal
        self.label_cleanSignal.setText("Clean Signal")
        self.label_cleanSignal.setStyleSheet("background-color: rgba(0,0,0,0%);" +
                                             'font: 12pt "Sitka Text";' +
                                             "color:#0E6251;")
        #Set the alignment to center
        self.label_cleanSignal.setAlignment(Qt.AlignCenter)

    def designGraph(self):
        """
        Design the labelling of the graph
        """
        #Denoised signal graph
        self.graphicsView_denoisedSignal.setLabel('bottom', '<span style=\"color:"#1A5276";font-size:8pt\">Time(T)</span>')
        self.graphicsView_denoisedSignal.setLabel('left', '<span style=\"color:"#1A5276";font-size:8pt\">Amplitude</span>')
        self.graphicsView_denoisedSignal.getAxis('left').setTextPen('#1A5276')
        self.graphicsView_denoisedSignal.getAxis('left').setPen('#1A5276')
        self.graphicsView_denoisedSignal.getAxis('bottom').setTextPen('#1A5276')
        self.graphicsView_denoisedSignal.getAxis('bottom').setPen('#1A5276')
        self.graphicsView_denoisedSignal.setBackground(None)

        #Normalized signal graph
        self.graphicsView_normalizedSignal.setLabel('bottom', '<span style=\"color:"#1A5276";font-size:8pt\">Time(T)</span>')
        self.graphicsView_normalizedSignal.setLabel('left', '<span style=\"color:"#1A5276";font-size:8pt\">Amplitude</span>')
        self.graphicsView_normalizedSignal.getAxis('left').setTextPen('#1A5276')
        self.graphicsView_normalizedSignal.getAxis('left').setPen('#1A5276')
        self.graphicsView_normalizedSignal.getAxis('bottom').setTextPen('#1A5276')
        self.graphicsView_normalizedSignal.getAxis('bottom').setPen('#1A5276')
        self.graphicsView_normalizedSignal.setBackground(None)

        #Shannon Envelope graph
        self.graphicsView_ShannonEnvelope.setLabel('bottom', '<span style=\"color:"#1A5276";font-size:8pt\">Time(T)</span>')
        self.graphicsView_ShannonEnvelope.setLabel('left', '<span style=\"color:"#1A5276";font-size:8pt\">P(T)</span>')
        self.graphicsView_ShannonEnvelope.getAxis('left').setTextPen('#1A5276')
        self.graphicsView_ShannonEnvelope.getAxis('left').setPen('#1A5276')
        self.graphicsView_ShannonEnvelope.getAxis('bottom').setTextPen('#1A5276')
        self.graphicsView_ShannonEnvelope.getAxis('bottom').setPen('#1A5276')
        self.graphicsView_ShannonEnvelope.setBackground(None)

        #S1 (lub) and S2 (dub) sound graph 
        self.graphicsView_locateS1S2.setLabel('bottom', '<span style=\"color:"#1A5276";font-size:8pt\">Time(T)</span>')
        self.graphicsView_locateS1S2.setLabel('left', '<span style=\"color:"#1A5276";font-size:8pt\">Amplitude</span>')
        self.graphicsView_locateS1S2.getAxis('left').setTextPen('#1A5276')
        self.graphicsView_locateS1S2.getAxis('left').setPen('#1A5276')
        self.graphicsView_locateS1S2.getAxis('bottom').setTextPen('#1A5276')
        self.graphicsView_locateS1S2.getAxis('bottom').setPen('#1A5276')
        self.graphicsView_locateS1S2.setBackground(None)

        #Cleaned signal graph
        self.graphicsView_cleanSignal.setLabel('bottom', '<span style=\"color:"#1A5276";font-size:8pt\">Time(T)</span>')
        self.graphicsView_cleanSignal.setLabel('left', '<span style=\"color:"#1A5276";font-size:8pt\">Amplitude</span>')
        self.graphicsView_cleanSignal.getAxis('left').setTextPen('#1A5276')
        self.graphicsView_cleanSignal.getAxis('left').setPen('#1A5276')
        self.graphicsView_cleanSignal.getAxis('bottom').setTextPen('#1A5276')
        self.graphicsView_cleanSignal.getAxis('bottom').setPen('#1A5276')
        self.graphicsView_cleanSignal.setBackground(None) 
        

    def plotGraph(self):
        """
        Plot the graph and proceed to features extraction
        """
        #load the trained model
        heartSound_predictor = keras.models.load_model("heartModel.h5")
        #Initialize the Segmentation and Features Extraction class
        segmentation = Segmentation("None", "None", "None", "None")
        features = FeaturesExtraction("None", "None", "None", "None")
        #Initialize the class name
        class_names = ['normal','murmur','extrasystole','extra heart sound']
        #Initialize feature name
        features_names = ['Threshold',
                          'Zero-crossing rate',
                          'Mel-frequency cepstral coefficients (mean)', 'Mel-frequency cepstral coefficients(standard deviation)', 
                          'Spectral Centroid',
                          'Spectral Rolloff',
                          'Spectral Flux',
                          'Frequency domain real (mean)','Frequency Domain (standard deviation)',
                          'Energy Entropy']
        #Read the json file
        with open('ranges.json') as json_file:
            data = json.load(json_file)

        #Initialize the list for normalization
        min_max_values = []
        for ranges in data['normalize_range']:
            min_max_values.append(ranges['minimum'])
            min_max_values.append(ranges['maximum'])

        #segmentation for the heart sound
        #Inititialize the list
        signal = []
        #Assign the signal and the sample per rate accordingly
        if self.isRealTime:
            signal = np.array(self.audio_signal)
            self.sample_rate = 44100
        else:
            signal , self.sample_rate = segmentation.loadFile(self.audio_signal, proceed=False)

        #Denoised the signal
        self.denoised_signal = segmentation.noiseRemoval(signal, self.sample_rate, proceed=False)
        #Normalized the signal
        self.normalized_signal = segmentation.normalizeSignal(self.denoised_signal, self.denoised_signal, self.sample_rate, proceed=False)
        #Calculate Shannon Energy
        shannon_energy = segmentation.shannonEnergy(self.normalized_signal, self.sample_rate, self.denoised_signal, proceed=False)
        #Calculate Shannon Energy Envelope
        segment_Shannon_energy = segmentation.average_Shannon_Energy(shannon_energy, self.isRealTime, self.sample_rate, self.denoised_signal, proceed=False)
        #calculate the time for envelope
        self.shannon_envelope, mean_Shannon_Energy, std_Shannon_Energy, self.envelope_time = segmentation.shannon_Envelope(segment_Shannon_energy,
                                                                                                                           self.denoised_signal, self.sample_rate, proceed=False)
        #calculate the threshold and extract signal
        self.segmented_signal, self.clean_segmented_signal, threshold = segmentation.extractSignalBasedOnThreshold(self.shannon_envelope, mean_Shannon_Energy, std_Shannon_Energy,
                                                                                                         self.denoised_signal, self.sample_rate, proceed=False)
        #define the x-axis label for signal
        length_of_signal = len(self.denoised_signal)
        t = np.linspace(0,(length_of_signal/self.sample_rate),length_of_signal)
        pen = pg.mkPen(color=(40,116,166))
        #define the x-axis label for clean segmented signal
        length_of_signal = len(self.clean_segmented_signal)
        overall_segmented_time = np.linspace(0,(length_of_signal/self.sample_rate),length_of_signal)
        pen = pg.mkPen(color=(40,116,166))
        #plot the graph
        self.graphicsView_denoisedSignal.plot(t,self.denoised_signal, pen=pen)
        self.graphicsView_normalizedSignal.plot(t,self.normalized_signal, pen=pen)
        self.graphicsView_ShannonEnvelope.plot(self.envelope_time,self.shannon_envelope, pen=pen)
        self.graphicsView_locateS1S2.plot(t,self.segmented_signal, pen=pen)
        self.graphicsView_cleanSignal.plot(overall_segmented_time,self.clean_segmented_signal, pen=pen)

        #extract the features from the heart sound
        heart_sound_feature = features.extractFeatures(self.clean_segmented_signal, self.sample_rate, threshold)
        #initialize the list
        heart_sound_feature_unnormalized = []

        #normalize the feature values
        min_index = 0
        max_index = 1
        #iterate through the features
        for i in range(0, len(heart_sound_feature)):
            value = float(heart_sound_feature[i])
            #Save the value to the list
            heart_sound_feature_unnormalized.append(value)
            #normalize the value
            normalized_value = (value - min_max_values[min_index])/(min_max_values[max_index] - min_max_values[min_index])
            heart_sound_feature[i] = normalized_value
            min_index = min_index + 2
            max_index = max_index + 2
        #change data to dataframe formate
        heart_sound_feature_df = pd.DataFrame(heart_sound_feature)
        #reshape the data
        heart_sound_feature_df = heart_sound_feature_df.values.reshape(1, 1, 5, 2)
        #change the data type of data
        heart_sound_feature_df = np.asarray(heart_sound_feature_df).astype('float32')
        #predict the type of heart sound
        predicted_data = np.argmax(heartSound_predictor.predict(heart_sound_feature_df))
        #extract the result from the predicted result
        self.predicted_result = class_names[predicted_data]
        #extract the predicted probability of each classes
        probability = heartSound_predictor.predict(heart_sound_feature_df)
        print(probability)
        #Set the identified heart sound to the label
        self.label_title.setText("Diagnosed Result : " + self.predicted_result + " status")
        self.label_title.setStyleSheet("background-color: rgba(174,214,241,100%);"+
                                       'font: 50 20pt "Bell MT"; ' +
                                       "color: #1B4F72;")

        #save the record
        self.savingDiagnosedData()
        #display the features value
        self.ExtractedFeatures(features_names, heart_sound_feature_unnormalized, heart_sound_feature)
        #display the history record
        self.historyList()
        #probability progress bar
        self.progressBarDesign(probability)
        #design table for disease
        self.diseasesTableDesign()

    def clearSignalIllustration(self, identifier):
        """
        Matplotlib API signal visualization

        Parameter
        ---------
        identifier : int
            To identified between the signal of different stage
        """
        #Initialize the variable
        signal = 0 #initialize signal to zero
        title = "Waveform" #initialize title to Waveform
        FIG_SIZE = (15,5) #initialize the figure size
        plt.figure(figsize=FIG_SIZE)# set the figure size
        # 0 represents denoised signal
        # 1 represents normalized signal
        # 2 represents Shannon Energy envelope
        # 3 represents s1 and s2 heart sound
        # 4 represents cleaned signal
        if identifier == 0:
            signal = self.denoised_signal
            title = title + "(Denoised signal)"
        elif identifier == 1:
            signal = self.normalized_signal
            title = title + " (Normalized Signal)"
        elif identifier == 2:
            signal = self.shannon_envelope
            title = "Shannon Energy Envelope"
        elif identifier == 3:
            signal = self.segmented_signal
            title = title + " S1 and S2 sound"
        elif identifier == 4:
            signal = self.clean_segmented_signal
            title = title + " (Cleaned Signal)"

        plt.xlabel("Time (s)")#set the label of x-axis
        # Change the label of y-axis to `P(t)` if identifier is 2, otherwise is `Amplitute`
        if identifier == 2:
            plt.plot(self.envelope_time, signal, color="r")
            plt.ylabel("P(t)") #set the label of y-axis
        else:
            librosa.display.waveplot(signal, self.sample_rate, alpha=0.4)
            plt.ylabel("Amplitude")#set the label of y-axis

        plt.title(title)#set the title of the graph
        plt.grid()#set the grid to the graph
        plt.show()#illustrate the graph
            

    def ExtractedFeatures(self, features_name, heart_sound_feature_unnormalized, features_value):
        """
        Extract the features from the segmented heart sound signal

        Parameters
        ----------
        features_name : list
            The list of feature's name
        heart_sound_feature_unnormalized: list
            The list of feature's value
        features_value : list
            The list of normalized feature's value
        """
        #iterate through the features name
        for i in range(len(features_name)):
            #Initialize the QCustomQWidget class
            customWidget = QCustomQWidget()
            #Pass the features name and feature values for labelling
            customWidget.setFeatureName(features_name[i])
            customWidget.setFeatureValue(str(heart_sound_feature_unnormalized[i]), str(features_value[i]))
            #Initialize the QListWidgetItem
            self.listWidgetItem = QtGui.QListWidgetItem(self.listWidget_featureList)
            #Resize according to the content
            self.listWidgetItem.setSizeHint(customWidget.sizeHint())
            #Add the item to the list
            self.listWidget_featureList.addItem(self.listWidgetItem)
            #add the QListWidgetItem object to QCustomQWidget object
            self.listWidget_featureList.setItemWidget(self.listWidgetItem, customWidget)

    def historyList(self):
        """
        List out the history diagonised record that retrieved from firebase
        """
        #Initialize the firebase database and connect to the URL
        diagnosed_dataset = firebase.FirebaseApplication('https://heartsounddb-default-rtdb.firebaseio.com/', None)
        #Retrieve the data from the Diagnosed_Result table using the URL
        diagnosed_data = diagnosed_dataset.get('/heartsounddb-default-rtdb/Diagnosed_Result/','')
        #Retrieve the values of the dir from the retrieved data
        diagnosed_value = diagnosed_data.values()
        #Retrieve the username from the user information list
        username = self.information_collection[len(self.information_collection)-1]
        #Iterate through the value
        for i in diagnosed_value:
            #Retrieve the data of status, method, date, and time accordingly to the matched userid
            if(i['Username'] == username):
                #Initialize the QCustomQWidget class
                historyWidget = QCustomQWidgetHistoryRecord()
                #Pass the status, method, date, and time data for labelling
                historyWidget.setStatus(i['Status'])
                historyWidget.setMethod(i['Method'])
                historyWidget.setDateTime(i['Date'], i['Time'])
                #Initialize the QListWidgetItem
                self.listWidgetItem = QtGui.QListWidgetItem(self.listWidget_historyList)
                #Resize according to the content
                self.listWidgetItem.setSizeHint(historyWidget.sizeHint())
                #Add the item to the list
                self.listWidget_historyList.addItem(self.listWidgetItem)
                #add the QListWidgetItem object to QCustomQWidget object
                self.listWidget_historyList.setItemWidget(self.listWidgetItem, historyWidget)

    def savingDiagnosedData(self):
        """
        Saved the diagnosed data to the database
        """
        #Initialize the firebase database and connect to the URL
        user_dataset = firebase.FirebaseApplication('https://heartsounddb-default-rtdb.firebaseio.com/', None)
        #Retrieve the system date and the system time 
        date = str(datetime.date(datetime.now()))
        time = str(datetime.time(datetime.now()))
        #Extract only the hour and minutes
        time = time[:5]
        #Retrieve the username from the user information list
        username = self.information_collection[len(self.information_collection)-1]
        #Initialize the method to audio file (by default)
        method = "Audio File"
        #Change the method to ECG sensor is it is realtime diagnosis
        if self.isRealTime:
            method = "ECG sensor"
        #Structure the data in a dictionary format
        diagnosed_result = { 'Username':username,
                          'Status':self.predicted_result,
                          'Date':date,
                          'Time':time,
                          'Method': method,
                        }
        #Save the data to Diagnosed_Result table using URL 
        user_dataset.post('/heartsounddb-default-rtdb/Diagnosed_Result/', diagnosed_result)

    def progressBarDesign(self, probability):
        """
        Progress bar to illustrate the probability values that are distributed among four differet class 
        """
        #Initialize the maximum value and minimum value of 4 of the progress bars to 100 and 0
        self.progressBar_normal.setMinimum(0)
        self.progressBar_normal.setMaximum(100)
        self.progressBar_murmur.setMinimum(0)
        self.progressBar_murmur.setMaximum(100)
        self.progressBar_extrasystole.setMinimum(0)
        self.progressBar_extrasystole.setMaximum(100)
        self.progressBar_exhs.setMinimum(0)
        self.progressBar_exhs.setMaximum(100)
        #Design the progress bar for normal heart sound progress bar
        self.progressBar_normal.setStyleSheet("QProgressBar{ " +
                                              "border: 0px;" +
                                              "background-color: rgba(0,0,0,0%); " +
                                              'font: 14pt "Sitka Text";' +
                                              "color: #186A3B;} " +
                                              "QProgressBar::chunk {" +
                                              "background-color: #2ECC71;" +
                                              "width: 10px;" +
                                              "margin: 1px;}")
        #Set the alignment of the content to right
        self.progressBar_normal.setAlignment(Qt.AlignRight)
        
        #Design the progress bar for murmur heart sound progress bar
        self.progressBar_murmur.setStyleSheet("QProgressBar{ " +
                                              "border: 0px;" +
                                              "background-color: rgba(0,0,0,0%);" +
                                              'font: 14pt "Sitka Text";' +
                                              "color: #641E16;} "+
                                              "QProgressBar::chunk {" +
                                              "background-color: #EC7063;" +
                                              "width: 10px;" +
                                              "margin: 1px;}")
        #Set the alignment of the content to right
        self.progressBar_murmur.setAlignment(Qt.AlignRight) 

        #Design the progress bar for extrasystole heart sound progress bar
        self.progressBar_extrasystole.setStyleSheet("QProgressBar{ " +
                                              "border: 0px;" +
                                              "background-color: rgba(0,0,0,0%);" +
                                              'font: 14pt "Sitka Text";' +
                                              "color: #641E16;} " +
                                              "QProgressBar::chunk {" +
                                              "background-color: #EC7063;" +
                                              "width: 10px;" +
                                              "margin: 1px;}")
        #Set the alignment of the content to right
        self.progressBar_extrasystole.setAlignment(Qt.AlignRight) 

        #Design the progress bar for extra heart sound progress bar
        self.progressBar_exhs.setStyleSheet("QProgressBar{ " +
                                            "border: 0px;" +
                                            "background-color: rgba(0,0,0,0%);" +
                                            'font: 14pt "Sitka Text";' +
                                            "color: #641E16;}" +
                                            "QProgressBar::chunk {" +
                                            "background-color: #EC7063;" +
                                            "width: 10px;" +
                                            "margin: 1px;}")
        #Set the alignment of the content to right
        self.progressBar_exhs.setAlignment(Qt.AlignRight) 
        #Print the probabilities
        print(probability[0][0])
        print(probability[0][1])
        print(probability[0][2])
        print(probability[0][3])
        #Change the probability value to percentage
        self.normal_prob = int(round(probability[0][0] * 100, 0))
        self.murmur_prob = int(round(probability[0][1] * 100, 0))
        self.extrasystole_prob = int(round(probability[0][2] * 100, 0))
        self.exhs_prob = int(round(probability[0][3]* 100, 0))

    def diseasesTableDesign(self):
        """
        Display the table to illustrate the potential disease according to detected heart sound.
        The information for normal heart sound is the tips of preventing from heart disease, others is potential disease
        The information include disease, symptoms, cause, and risks
        """
        print(self.predicted_result)
        #Retrieved the data of the disease according to different heart sound
        if self.predicted_result == 'normal':
            self.diseasesData = dd.normal_prevention
        elif self.predicted_result == 'murmur':
            self.diseasesData = dd.murmur_diseases
        elif self.predicted_result == 'extrasystole':
            self.diseasesData = dd.extrasystole_diseases
        elif self.predicted_result == 'extra heart sound':
            self.diseasesData = dd.extra_heart_sound_diseases
        #Access the size of the data
        column_len = len(self.diseasesData)
        #Column count 
        self.tableWidget_disease.setColumnCount(column_len)
        #Set the header
        headers = self.tableWidget_disease.horizontalHeader()
        #Iterate through the column
        for i in range(0, column_len):
            if i == 0:
                #Resize according to header
                headers.setSectionResizeMode(i, QtWidgets.QHeaderView.Stretch)
            else:
                #Resize according yo contents
                headers.setSectionResizeMode(i, QtWidgets.QHeaderView.ResizeToContents)

        #set font style for data
        fnt_data = QFont()
        fnt_data.setPointSize(10)
        fnt_data.setFamily("Sitka Text")

        #set font style for header
        fnt_header = QFont()
        fnt_header.setPointSize(12)
        fnt_header.setBold(True)
        fnt_header.setFamily("Sitka Text")

        counter = 0
        header = []
        #Access the key and the value of the diseases data
        #key is the header
        #value is the data to the particular table
        for head, key in self.diseasesData.items():
            self.tableWidget_disease.setRowCount(len(key))  
            if len(header) < column_len:
                header.append(head)
            for i in range(0, len(key)):
                #add the key to the header of the table
                data_item = QTableWidgetItem(key[i])
                data_item.setFont(fnt_data)
                data_item.setFlags(QtCore.Qt.ItemIsEnabled)
                #Set to grey colour for the index row that is divisible by 2
                if i % 2 == 0:
                    data_item.setBackground(QtGui.QColor(215, 219, 221))
                #Add the data values to the table widgets
                self.tableWidget_disease.setItem(i, counter, data_item)
            counter = counter + 1
        #Resize the table accordingly to the contents
        self.tableWidget_disease.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.tableWidget_disease.verticalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.tableWidget_disease.setHorizontalHeaderLabels(header)
        #iterate through each header and change the font colour accordingly
        for i in range(0, column_len):
            header_item = self.tableWidget_disease.horizontalHeaderItem(i)
            header_item.setForeground(QtGui.QColor(21, 67, 96))
            header_item.setFont(fnt_header)
            self.tableWidget_disease.setHorizontalHeaderItem(i, header_item)

    def shadowEffect(self, objectName):
        """
        Set the shadow effects
        """
        self.shadow = QGraphicsDropShadowEffect(self)
        self.shadow.setBlurRadius(30)
        self.shadow.setXOffset(0)
        self.shadow.setYOffset(0)
        self.shadow.setColor(QColor(0,0,0,100))
        objectName.setGraphicsEffect(self.shadow)

class QCustomQWidget(QWidget):
    """
    A class for features custom widget

    ...

    Methods
    -------
    setFeatureName(feature_name)
        Set the features name to the label 
    setFeatureValue(feature_value)
        Set the featurs value to the label
    designFeatureLabel()
        Design the labels
    """
    def __init__ (self, parent = None):
        super(QCustomQWidget, self).__init__(parent)
        #define vertical layout
        self.verticalBoxLayout = QtGui.QVBoxLayout()
        #define label name
        self.label_featuresName = QtGui.QLabel()
        self.label_featuresValueUnNormalize = QtGui.QLabel()
        self.label_featuresValueNormalize = QtGui.QLabel()
        #add label to layout
        self.verticalBoxLayout.addWidget(self.label_featuresName)
        self.verticalBoxLayout.addWidget(self.label_featuresValueUnNormalize)
        self.verticalBoxLayout.addWidget(self.label_featuresValueNormalize)
        #set the layout
        self.setLayout(self.verticalBoxLayout)
        #design the feature label
        self.designFeatureLabel()

    def setFeatureName(self, feature_name):
        """
        Set the features name to the label

        Parameter
        ---------
        feature_name : str
            The feature name of the feature value
        """
        self.label_featuresName.setText("Feature Name : " + feature_name)

    def setFeatureValue(self, feature_value_Unnormalize, feature_value_normalized):
        """
        Set the featurs value to the label

        Parameter
        ---------
        feature_value_Unnormalize : float
            The feature value 
        feature_value_normalized : float
            The normalized feature value 
        """
        self.label_featuresValueUnNormalize.setText("Value : " + feature_value_Unnormalize)
        self.label_featuresValueNormalize.setText("Normalized Value : " + feature_value_normalized)

    def designFeatureLabel(self):
        """
        Design the features value
        """
        #The design of features name label
        self.label_featuresName.setStyleSheet(" border-style: solid;" +
                                              "border-radius: 30;" +
                                              "background-color:#F1948A;" +
                                              'font: 50 15pt "Modern No. 20"; ' +
                                              "color: #7B241C;")
        #The design of features value label
        self.label_featuresValueNormalize.setStyleSheet('font: 50 10pt "MS Sans Serif"; ' + "color: #E74C3C;")

        #The design of features value label
        self.label_featuresValueUnNormalize.setStyleSheet('font: 50 10pt "MS Sans Serif"; ' + "color: #E74C3C;")

class QCustomQWidgetHistoryRecord(QWidget):
    """
    A class for history custom widget

    ...

    Methods
    -------
    setStatus(status)
        Set the status to the label 
    setMethod(method)
        Set the method type to the label
    setDateTime(date, time)
        Set the date and time to the label
    designRecord()
        Design labels
    """
    def __init__ (self, parent=None):
        super(QCustomQWidgetHistoryRecord,self).__init__(parent)
        #define vertical layout
        self.verticalBoxLayout = QtGui.QVBoxLayout()
        #define label name
        self.label_status = QtGui.QLabel()
        self.label_method = QtGui.QLabel()
        self.label_date_time = QtGui.QLabel()
        #add the label to layout
        self.verticalBoxLayout.addWidget(self.label_status)
        self.verticalBoxLayout.addWidget(self.label_method)
        self.verticalBoxLayout.addWidget(self.label_date_time)
        #set the layout
        self.setLayout(self.verticalBoxLayout)
        #design the record
        self.designRecord()
        
    def setStatus(self, status):
        """
        Set the status to the label

        Parameter
        ---------
        status : str
            The diagnosed heart sound type
        """
        self.label_status.setText("Diagnosed heart status: " +status)

    def setMethod(self, method):
        """
        Set the method type to the label

        Parameter
        ---------
        method : str
            The method used for the diagnosis, either audio file or real-time analysis
        """
        self.label_method.setText("Diagnosis method: " +method)

    def setDateTime(self, date, time):
        """
        Set the date and time to the label

        Parameters
        ----------
        date : str
            The date of the diagnosed day
        time : str
            The time of the diagnosd day
        """
        #Change the meridiem (AM or PM) according to the time
        meridiem = "AM"
        if(int(time[:2]) > 12):
            meridiem = "PM"
        #Sett the time to the label
        self.label_date_time.setText("Date: "+date+"\tTime: "+time+" "+meridiem)

    def designRecord(self):
        """
        Design labels
        """
        #Design the label of the status
        self.label_status.setStyleSheet("border-style: solid;" +
                                              "border-radius: 30;" +
                                              'font: 50 16pt "Modern No. 20"; ' +
                                              "color: #34495E;")
        #Design the label of the method
        self.label_method.setStyleSheet('font: 90 14pt "MS Sans Serif"; ' + "color: #839192;")
        #Design the label of the dat and time
        self.label_date_time.setStyleSheet('font: 90 14pt "MS Sans Serif"; ' + "color: #839192;")

class normal_prob(Thread):
    """
    A class for running progress bar of normal heart sound probability value

    ...

    Attributes
    ----------
    normal_probability : int
        The probability value that has converted to percentage
    normal_pb : QProgressBar
        The object of the progress bar

    Methods
    -------
    run()
        Start the thread to run the progress bar
    """
    def __init__(self, normal_probability, normal_pb):
        """
        Parameters
        ----------
        normal_probability : int
            The probability value that has converted to percentage
        normal_pb : QProgressBar
            The object of the progress bar
        """
        super(normal_prob, self).__init__()
        self.normal_probability = normal_probability
        self.normal_pb = normal_pb

    def run(self):
        """
        Set the value to the progress bar
        """
        for i in range(self.normal_probability):
            self.normal_pb.setValue(i+1)


class murmur_prob(Thread):
    """
    A class for running progress bar of murmur heart sound probability value

    ...

    Attributes
    ----------
    murmur_probability : int
        The probability value that has converted to percentage
    murmur_pb : QProgressBar
        The object of the progress bar

    Methods
    -------
    run()
        Start the thread to set the progress bar
    """
    def __init__(self, murmur_probability, murmur_pb):
        """
        Parameters
        ----------
        murmur_probability : int
            The probability value that has converted to percentage
        murmur_pb : QProgressBar
            The object of the progress bar
        """
        super(murmur_prob, self).__init__()
        self.murmur_probability = murmur_probability
        self.murmur_pb = murmur_pb

    def run(self):
        """
        Set the value to the progress bar
        """
        for i in range(self.murmur_probability):
            self.murmur_pb.setValue(i+1)


class extrasystole_prob(Thread):
    """
    A class for running progress bar of extrasystole heart sound probability value

    ...

    Attributes
    ----------
    extrasystole_probability : int
        The probability value that has converted to percentage
    extrasystole_pb : QProgressBar
        The object of the progress bar

    Methods
    -------
    run()
        Start the thread to set the progress bar
    """
    def __init__(self, extrasystole_probability, extrasystole_pb):
        """
        Parameters
        ----------
        extrasystole_probability : int
            The probability value that has converted to percentage
        extrasystole_pb : QProgressBar
            The object of the progress bar
        """
        super(extrasystole_prob, self).__init__()
        self.extrasystole_probability = extrasystole_probability
        self.extrasystole_pb = extrasystole_pb

    def run(self):
        """
        Set the value to the progress bar
        """
        for i in range(self.extrasystole_probability):
            self.extrasystole_pb.setValue(i+1)


class exhs_prob(Thread):
    """
    A class for running progress bar of extra heart sound probability value

    ...

    Attributes
    ----------
    exhs_probability : int
        The probability value that has converted to percentage
    exhs_pb : QProgressBar
        The object of the progress bar

    Methods
    -------
    run()
        Start the thread to set the progress bar
    """
    def __init__(self, exhs_probability, exhs_pb):
        """
        Parameters
        ----------
        exhs_probability : int
            The probability value that has converted to percentage
        exhs_pb : QProgressBar
            The object of the progress bar
        """
        super(exhs_prob, self).__init__()
        self.exhs_probability = exhs_probability
        self.exhs_pb = exhs_pb

    def run(self):
        """
        Set the value to the progress bar
        """
        for i in range(self.exhs_probability):
            self.exhs_pb.setValue(i+1)


class ResultGUI(QtCore.QThread):
    """
    A class for result GUI window

    ...

    Attributes
    ----------
    signal : ndarray
        The array of storing the heart sound signal
    isRealTime : boolean
        The boolean to identify between the real-time analyse and non-realtime analysis
    information_collection : list
        The list to store the information of the login user

    Methods
    -------
    run()
        Start the thread
    """
    def __init__(self, signal, isRealTime, information_collection):
        """
        Parameters
        ----------
        signal : ndarray
            The array of storing the heart sound signal
        isRealTime : boolean
            The boolean to identify between the real-time analyse and non-realtime analysis
        information_collection : list
            The list to store the information of the login user
        """
        super(ResultGUI, self).__init__()
        self.signal = signal
        self.isRealTime = isRealTime
        self.information_collection = information_collection

    def run(self):
        """
        Initialize and start the result activity interface window
        """
        #open a result page
        self.resultGui = ResultActivity(self.signal, self.isRealTime, self.information_collection)
        self.resultGui.show()#show the window
