# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Heart_Sound_Identification_System.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

#Background Picture is provided by Susan Miller from website GCN (The Technology that Drives Government IT)
#Website URL: https://gcn.com/articles/2019/06/28/jetson-biometric-heartbeat-id.aspx

#GIF is provided by GifImage website, Gif Heartbeat Line, and GeorgiaTech
#Website URL: https://gifimage.net/electrocardiograma-gif-9/
#Website URL: https://davidbaptistechirot.blogspot.com/2018/11/gif-heartbeat-line.html
#Website URL: https://rh.gatech.edu/sites/default/files/images/research_horizons/BrokenHeart/solution_6_3.gif


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import*
from PyQt5.QtGui import*
from PyQt5.QtCore import*
from threading import *
from pyqtgraph import PlotWidget
from scipy.io.wavfile import write
from plotly.offline import init_notebook_mode
from PyQt5.uic import loadUi
from scipy.io import wavfile
from Interface3_AnalysisResult import ResultActivity
from Segmentation_FeaturesExtract import Segmentation
from LodingUI import LoadingProgress
from ErrorUI import ErrorActivity, ErrorUI
from ECG_signal import SerialProcess
from queue import Queue
from sklearn import preprocessing
import threading
import numpy as np
import pandas as pd
import librosa, librosa.display
import matplotlib.pyplot as plt
import matplotlib.patheffects as path_effects
import plotly.graph_objs as go
import plotly
import noisereduce as nr
import wave
import math
import sys
import serial
import pyqtgraph as pg
import pygame
import time

class MainActivity(QtGui.QMainWindow):
    """
    This is the main activity for heart sound signal acquisition page

    ...

    Attributes
    ----------
    isRealTime : Boolean
            Identify between realtime and non-realtime signal acquisition
    audio_name : str, optional
            The audio file name of the selected audio file
    information_collection : array
            Store all the details of the user

    Methods
    -------
    realTimeTransmission()
        Start and stop the real-time transmission
    startFadeOut(label_realtimeAnimate)
        Fade out the GIF label
    startFadeIn(self, label_realtimeAnimate)
        Faded in the GIF label
    realTimeAnalysis()
        Start the realtime analysis
    update_plot_data()
        plot the audio signal
    ECGRealTime()
        extract the ECG real-time signal
    newWindow()
        Start a result window of audio file analysis
    stop()
        Stop the playing audio file
    play()
        Play the audio file
    update_graph(file_path='None')
        Plot the real-time signal
    audio_file_label(audio_file_name='None')
        Display the audio file name
    _open_file_dialog()
        Start the file dialog box
    """
    def __init__(self, isRealTime, audio_name, information_collection):        
        super().__init__()
        """
        Parameters
        ----------
        isRealTime : Boolean
            Identify between realtime and non-realtime signal acquisition
        audio_name : str, optional
            The audio file name of the selected audio file
        information_collection : array
            Store all the details of the user

        Initialization of the variables

        Attributes
        ----------
        self.animation : the object of QVariantAnimation class
        self.queue_time : the queue for storing the time
        self.queue_signal : the queue for storing the signal
        self.realSignal : the array to store the real time signal
        self.check_connection: the list to check the connectivity error
        self.event: The objec for coontrolling the thread event
        """
        self.isRealTime = isRealTime
        self.audio_name = audio_name
        self.information_collection = information_collection
        self.animation = QtCore.QVariantAnimation()
        self.queue_time = Queue()
        self.queue_signal = Queue()
        self.realSignal = []
        self.check_connection = []
        self.event = 0

        #Link to the UI file named Heart_Sound_Identification_System.ui
        loadUi("Heart_Sound_Identification_System.ui",self)
        #set the title of the window
        self.setWindowTitle("Heart sounds identification system")
        #initialize the timer of the window
        self.timer = QtCore.QTimer()
        
        #set the width and the height of the current window frame
        width = self.frameGeometry().width()
        height = self.frameGeometry().height()
        #define the vertical layout
        background_Layout = QVBoxLayout()
        background_label = QLabel()
        #load the background image
        oImage = QImage("Icon/cardio_background.jpg")
        #scale the image
        sImage = oImage.scaled(QSize(width,height))
        #set the image to label
        background_label.setPixmap(QtGui.QPixmap(sImage))
        background_label.setLayout(self.gridLayout)
        background_label.setScaledContents(True)
        #set the layout of the label
        background_label.setLayout(self.gridLayout)
        background_label.setScaledContents(True)
        background_Layout.addWidget(background_label)
        #set the background layout to the layout of the centralwidget
        self.centralwidget.setLayout(background_Layout)
        #design the label
        self.label_FileTitle.setStyleSheet("background-color: rgba(0,0,0,0%)");
        self.label_realtimeTitle.setStyleSheet("background-color: rgba(0,0,0,0%)");
        self.label_realtimeAnimate.setStyleSheet("padding: 10px; background-color: rgba(0,0,0,0%)");
        self.label_fileNameSection.setStyleSheet("padding: 10px; border-radius: 20px; background-color: rgba(0,0,0,0%)");
        self.label_username.setText("Welcome back " + self.information_collection[0] + " " +self.information_collection[1] + " !")
        self.label_username.setStyleSheet("QLabel{color: #F1C40F;"
                                         'font: 80 20pt "MV Boli";}')
        #align the content of the label to right
        self.label_username.setAlignment(Qt.AlignRight)
        # remove the background of the graph
        self.graphicsView_fileSignal.setBackground(None)
        self.graphicsView_realtimeSignal.setBackground(None)
        #design the button
        self.button_selectAudio.setStyleSheet("QPushButton{color:#1D8348;" +
                                      "padding: 10px;" +
                                      'font: 12pt "Nirmala UI";' +
                                      "border-style : solid;" +
                                      "border-radius: 10px;" +
                                      "background-color: rgba(255,255,255,50%);" +
                                      "image: url('Icon/directory_nonhover.png');"+
                                      "image-position:left;" +
                                      "background-repeat: non-repeat;}" +
                                      "QPushButton:hover{background-color : #2ECC71;" +
                                      "color: black;" +
                                      "image: url('Icon/directory_hover.png');"+
                                      "background-repeat: non-repeat;}")
        self.button_realtimeTransmission.setStyleSheet("QPushButton {color:#b224bc;" +
                                        "padding: 10px;" +
                                        'font: 11pt "Nirmala UI";' +            
                                        "border-style : solid;" +
                                        "border-radius: 10px;" +
                                        "background-color: rgba(255,255,255,50%);" +
                                        "image: url('Icon/realtime_nonhover.png');" +
                                        "image-position:left;" +
                                        "background-repeat: no-repeat;}" +
                                        "QPushButton:hover{background-color : #b224bc;" +
                                        "color: black;"+
                                        "image: url('Icon/realtime_hover.png');" +
                                        "background-repeat: no-repeat;}")
        #load and set the gif to label
        self.movie = QtGui.QMovie("GIF/realtime.gif")
        size = QtCore.QSize(300, 300)
        self.movie.setScaledSize(size)
        self.label_realtimeAnimate.setMovie(self.movie)
        self.movie.stop()#stop the gif
        self.ECGsignal = QtGui.QMovie("GIF/heartbeat1.gif")
        size = QtCore.QSize(min(320, 320), min(50, 50))
        self.ECGsignal.setScaledSize(size)
        self.label_signalAnimation1.setMovie(self.ECGsignal)
        self.ECGsignal.start()#start the gif
        self.ECGsignal2 = QtGui.QMovie("GIF/heartbeat2.gif")
        size = QtCore.QSize(min(320, 320), min(50, 50))
        self.ECGsignal2.setScaledSize(size)
        self.label_signalAnimation2.setMovie(self.ECGsignal2)
        self.ECGsignal2.start()#start the gif
        #deactivate the function of the button and invisible the button
        self.button_playSound.setEnabled(False)
        self.button_playSound.setVisible(False)
        self.button_stopSound.setEnabled(False)
        self.button_stopSound.setVisible(False)
        self.button_analyse.setEnabled(False)
        self.button_analyse.setVisible(False)
        self.button_realTimeAnalyse.setEnabled(False)
        self.button_realTimeAnalyse.setVisible(False)
        #link the function to the buttons
        self.button_selectAudio.clicked.connect(self._open_file_dialog)
        self.button_realtimeTransmission.clicked.connect(self.realTimeTransmission)
        self.button_playSound.clicked.connect(self.play)
        self.button_stopSound.clicked.connect(self.stop)
        self.button_analyse.clicked.connect(self.newWindow)
        self.button_realTimeAnalyse.clicked.connect(self.realTimeAnalysis)
    
    def realTimeTransmission(self):
        """
        Initialize the realtime transmission function
        """
        #start the real time transmission, otherwise deactivate
        if self.isRealTime == False:
            #start the gif label
            self.startFadeIn(self.label_realtimeAnimate)
            self.movie.start()
            #change the axis and label colour
            self.graphicsView_realtimeSignal.getAxis('left').setTextPen('#C51BD2')
            self.graphicsView_realtimeSignal.getAxis('left').setPen('#C51BD2')
            self.graphicsView_realtimeSignal.getAxis('bottom').setTextPen('#C51BD2')
            self.graphicsView_realtimeSignal.getAxis('bottom').setPen('#C51BD2')
            self.graphicsView_realtimeSignal.setLabel('bottom', '<span style=\"color:"#C51BD2";font-size:10pt\">Time (T)</span>')
            self.graphicsView_realtimeSignal.setLabel('left', '<span style=\"color:"#C51BD2";font-size:10pt\">Amplitude</span>')
            #design the button
            self.button_realTimeAnalyse.setStyleSheet("QPushButton{color:#884EA0;" +
                                      "padding: 10px;" +
                                      'font: 12pt "Nirmala UI";' +
                                      "border-style : solid;" +
                                      "border-radius: 10px;" +
                                      "background-color: rgba(255,255,255,50%);" +
                                      "image: url('Icon/realtimeanalyse_nonhover.png');"+
                                      "image-position:left;" +
                                      "background-repeat: non-repeat;}" +
                                      "QPushButton:hover{background-color : #884EA0;" +
                                      "color: black;" +
                                      "image: url('Icon/realtimeanalyse_hover.png');"+
                                      "background-repeat: non-repeat;}")
            #set the text to the button
            self.button_realtimeTransmission.setText('Disable Transmission')
            #indicate that real-time transmission is triggered
            self.isRealTime = True
        else:
            #empty the queue as real-time transmission is denied 
            self.queue_time.empty()
            self.queue_signal.empty()
            #disable the button
            self.button_realTimeAnalyse.setEnabled(False)
            self.button_realTimeAnalyse.setVisible(False)
            self.button_realtimeTransmission.setText('Real-time signal')
            #change the axis colour 
            self.graphicsView_realtimeSignal.getAxis('left').setTextPen('#D0D3D4')
            self.graphicsView_realtimeSignal.getAxis('left').setPen('#D0D3D4')
            self.graphicsView_realtimeSignal.getAxis('bottom').setTextPen('#D0D3D4')
            self.graphicsView_realtimeSignal.getAxis('bottom').setPen('#D0D3D4')
            self.graphicsView_realtimeSignal.setLabel('bottom', '<span style=\"color:"#D0D3D4";font-size:10pt\"></span>')
            self.graphicsView_realtimeSignal.setLabel('left', '<span style=\"color:"#D0D3D4";font-size:10pt\"></span>')
            #fade out the gif
            self.startFadeOut(self.label_realtimeAnimate)
            self.movie.stop()
            #Stop the threading
            self.event.set()
            #indicated that real-time transmission is denied
            self.isRealTime = False
            
        #start the real-time transmission only real-time is indicated
        if self.isRealTime == True:
            self.ECGRealTime()
        
    def startFadeIn(self, label_realtimeAnimate):
        """
        Faded in effect for the gif label and start the gif animation

        Parameters
        ----------
        label_realtimeAnimate: QLabel object
                            The label with gif animation 
        """
        #initialize the Qgraphics
        self.effect = QGraphicsOpacityEffect()
        label_realtimeAnimate.setGraphicsEffect(self.effect)
        #initialize the animation effect
        self.animation = QtCore.QPropertyAnimation(self.effect, b"opacity")
        self.animation.setDuration(4000)
        self.animation.setStartValue(0)
        self.animation.setEndValue(1)
        #start the animation
        self.animation.start()

    def startFadeOut(self, label_realtimeAnimate):
        """
        Faded out effect for the gif label and start the gif animation

        Parameters
        ----------
        label_realtimeAnimate: QLabel object
                            The label with gif animation 
        """
        self.effect = QGraphicsOpacityEffect()
        label_realtimeAnimate.setGraphicsEffect(self.effect)
    
        self.animation = QtCore.QPropertyAnimation(self.effect, b"opacity")
        self.animation.setDuration(4000)
        self.animation.setStartValue(1)
        self.animation.setEndValue(0)
        self.animation.start()

    def _open_file_dialog(self):
        """
        Starting the file dialog box and open the .WAV file

        Raises
        ------
        self.audio_file_label()
            Function to display the error message on QLabel
        """
        try:
            #initialize the file type and directory object
            filter = "Wav File (*.wav)"
            audio_file = ""
            directory = str(QtGui.QFileDialog.getOpenFileName(self, "Audio File","", filter))
            #display the error message if the file path is empty, otherwise retrieve file name
            if (directory == '') or (len(directory) == 0):
                self.audio_file_label()
            else:
                #process the file path to extract the file name
                length_of_path = len(directory)
                file_name = directory[::-1]
                file_name = file_name[22:length_of_path]
                full_path = file_name[::-1]
                length_of_path = len(full_path)
                full_path = full_path[2:length_of_path]
                #iterate through the file path
                for i in range(0, len(file_name)):
                    if(file_name[i] == '/'):
                        break;
                    else:
                        audio_file += file_name[i]
                #reverse the file name correctly
                audio_file_name = audio_file[::-1]
                #display the audio file name on the QLabel
                self.audio_file_label(audio_file_name)
                #display the signal on the graph
                self.update_graph(full_path)
        except:
            self.audio_file_label()

    def audio_file_label(self, audio_file_name='None'):
        """
        If the argument `audio_file_name` isn't passed in, the default file name is used

        Parameters
        ----------
        audio_file_name: str
                    The audio file name 
        """
        #set the error message on the label, otherwise the audio file name is diplayed
        if (audio_file_name == 'None' or len(audio_file_name) == 0):
            #design the QLabel
            self.label_fileNameSection.setStyleSheet("QLabel {border : 2px #ff0004;" +
                                                     "color:#ff0004;" +
                                                     'font: 12pt "Nirmala UI";' +
                                                     "qproperty-alignment: AlignCenter;" +
                                                     "border-style : solid;" +
                                                     "background-color: rgba(241,148,138, 70%);}")    
            #set the message
            self.label_fileNameSection.setText('No audio file is selected!\nPlease select an audio file!')
            #set the alignment to center
            self.label_fileNameSection.setAlignment(Qt.AlignCenter)
            #disable the visibility and function of the button
            self.button_playSound.setEnabled(False)
            self.button_playSound.setVisible(False)
            self.button_stopSound.setEnabled(False)
            self.button_stopSound.setVisible(False)
            self.button_analyse.setEnabled(False)
            self.button_analyse.setVisible(False)
        else:
            #design the QLabel
            self.label_fileNameSection.setStyleSheet("QLabel {border : 1px #19CA7B;" +
                                                     "border-radius: 20px;" +
                                                     "padding-top: 10px;" +
                                                     "color:#04fded;" +
                                                     'font: 12pt "Nirmala UI";' +
                                                     "qproperty-alignment: AlignCenter;" +
                                                     "border-style : solid;" +
                                                     "background-color: rgba(0,0,0,0%);}")
            #displayed the file name 
            self.label_fileNameSection.setText('File name:\n'+ audio_file_name)
            #set the alignment to center
            self.label_fileNameSection.setAlignment(Qt.AlignCenter)

    def update_graph(self, file_path='None'):
        """
        If the argument `file_path` isn't passed in, the default file name is used

        Parameters
        ----------
        file_path: str
                The file path of the selected audio file name 
        
        """
        #display the signal of audio file 
        if(file_path == 'None' or len(file_path) == 0):
            #change the title and label of the graph colour if not audio file is selected
            self.graphicsView_fileSignal.setTitle("Visualize Signal", color="#2ECC71", size="12pt")
            self.graphicsView_fileSignal.setLabel('bottom', '<span style=\"color:"#CACFD2";font-size:10pt\">Time (T)</span>')
            self.graphicsView_fileSignal.setLabel('left', '<span style=\"color:"#CACFD2";font-size:10pt\">Amplitude</span>')

        else:
            #set the file path
            file = file_path
            self.audio_name = file_path
            #set the icon and button for audio playing button
            pixmap = QPixmap("Icon/play.png")
            icon = QIcon(pixmap)
            self.button_playSound.setIcon(icon)
            self.button_playSound.setIconSize(QtCore.QSize(30, 30))
            pixmap = QPixmap("Icon/stop.png")
            icon = QIcon(pixmap)
            self.button_stopSound.setIcon(icon)
            self.button_stopSound.setIconSize(QtCore.QSize(30, 30))
            #set the button style
            self.button_playSound.setStyleSheet('QPushButton {border-style: solid; border-radius: 10; padding: 10px; border-radius: 20px; background-color:#19CA7B;}')
            self.button_stopSound.setStyleSheet('QPushButton {border-style: solid; border-radius: 10; padding: 10px; border-radius: 20px; background-color:#19CA7B;}')
            #enable the visibility and function of button
            self.button_playSound.setEnabled(True)
            self.button_playSound.setVisible(True)
            self.button_stopSound.setEnabled(True)
            self.button_stopSound.setVisible(True)
            #design the analyse button
            self.button_analyse.setStyleSheet("QPushButton{color:#0E6655;" +
                                      "padding: 10px;" +
                                      'font: 12pt "Nirmala UI";' +
                                      "border-style : solid;" +
                                      "border-radius: 10px;" +
                                      "background-color: rgba(255,255,255,50%);" +
                                      "image: url('Icon/analyze_nonhover.png');"+
                                      "image-position:left;" +
                                      "background-repeat: non-repeat;}" +
                                      "QPushButton:hover{background-color : #0E6655;" +
                                      "color: black;" +
                                      "image: url('Icon/analyze_hover.png');"+
                                      "background-repeat: non-repeat;}")
            #enable the visibility and the function of the analyse button
            self.button_analyse.setEnabled(True)
            self.button_analyse.setVisible(True)
            #set title colour
            self.graphicsView_fileSignal.setTitle("Visualize Signal", color="#2ECC71", size="12pt")
            #set label colour
            self.graphicsView_fileSignal.setLabel('bottom', '<span style=\"color:"#7DB46CFF";font-size:10pt\">Time (T)</span>')
            self.graphicsView_fileSignal.setLabel('left', '<span style=\"color:"#7DB46CFF";font-size:10pt\">Amplitude</span>')
            #change the axis colour
            self.graphicsView_fileSignal.getAxis('left').setTextPen('#25DF21')
            self.graphicsView_fileSignal.getAxis('left').setPen('#25DF21')
            self.graphicsView_fileSignal.getAxis('bottom').setPen('#25DF21')
            self.graphicsView_fileSignal.getAxis('bottom').setTextPen('#25DF21')
            #extract the signal from analog to digital
            signal, sample_rate = librosa.load(file, sr=44100)
            #extract the time/duration of the signal
            length_of_signal = len(signal)
            t = np.linspace(0,(length_of_signal/sample_rate),length_of_signal)
            pen = pg.mkPen(color=(0,255,127))
            #plot the signal to the graph
            self.graphicsView_fileSignal.plot(t,signal, pen=pen)

    def play(self):
        """
        Play the signal of the audio file 
        """
        #play the signal if the audio file name is not empty
        if(self.audio_name != 0):
            pygame.init()
            pygame.mixer.init()
            pygame.mixer.music.load(self.audio_name)
            pygame.mixer.music.play()

    def stop(self):
        """
        Stop the signal of the audio file 
        """
        pygame.mixer.music.stop()

    def newWindow(self):
        """
        Initialize the loading GUI when the processing start
        """
        #Start the loading GUI if the audio file name is not empty 
        if(self.audio_name != 0 or len(self.audio_name) != 0):
            #initialize the thread of the loading window and start the thread process
            self.loading_window = LoadingProgress(self.audio_name, False, self.information_collection)
            self.loading_window.run()

    def ECGRealTime(self):
        """
        Retrieve the real-time ECG signal and displayed on the graph 
        """
        #initialize the thread of the real-time transmission and start the thread process
        #Initialize the list to empty
        self.check_connection = []
        #Clear the graph
        self.graphicsView_realtimeSignal.clear()
        #Empty the list
        self.realSignal = []
        #Initialize the thread event 
        self.e = threading.Event()
        #Initialize the Serial process 
        self.realtime_signal = SerialProcess(self.queue_time, self.queue_signal, self.check_connection)
        #Pass the process to thread
        self.thread_ecg = Thread(target=self.realtime_signal.run, args=(self.e,))
        #Pass the event to global control
        self.event = self.e
        #Start the tread
        self.thread_ecg.start()

        #Display the error window to show the error message if error occure
        if len(self.check_connection) > 0:
            self.error = ErrorActivity(1)
            self.error.show()
            
        #plot the signal on the data each 2 seconds interval
        self.timer.setInterval(2000)
        self.timer.timeout.connect(self.update_plot_data)
        self.timer.start()  
        #enable the visibility and function of the real-time analyse button
        self.button_realTimeAnalyse.setEnabled(True)
        self.button_realTimeAnalyse.setVisible(True)
        
    def update_plot_data(self):
        """
        Plot the real-time data on the graph 

        Raises
        ------
        Error message if the queue is empty 
        """
        try:
            #initialize the variable
            time_plot = []
            signal_plot = []
            counter = 0
            #continue to retrieve the signal until the time end
            while counter < self.queue_time.qsize():
                time_ = self.queue_time.get(True, counter)[0]
                signal_ = self.queue_signal.get(True,counter)
                time_plot.append(time_)
                signal_plot.append(signal_)
                self.realSignal.append(signal_)   
                counter = counter + 1
            #plot the ECG signal
            time_plot = np.array(time_plot)
            signal_plot = np.array(signal_plot)
            pen = pg.mkPen(color=(181,110,188))
            self.graphicsView_realtimeSignal.plot(time_plot, signal_plot, pen=pen)
        except:
            raise

    def realTimeAnalysis(self):
        """
        Initialize the loading GUI when the processing start
        """
        #Start the loading GUI if the real-time signal is retrieved 
        if(len(self.realSignal) != 0):
            self.loading_window = LoadingProgress(self.realSignal, True, self.information_collection)
            self.loading_window.run()            
        
class AcquisitionGUI(QtCore.QThread):
    """
    A class for audio acquisition GUI window

    ...

    Attributes
    ----------
    informations : list
        The information of the login user

    Methods
    -------
    run():
        Start the thread
    """
    def __init__(self, informations):
        """
        Parameters
        ----------
        informations : list
            The information of the login user
        """
        super(AcquisitionGUI, self).__init__()
        self.informations = informations

    def run(self):
        """
        Initialize and start the main activity interface window
        """
        self.ui = MainActivity(False, 0, self.informations)
        self.ui.show()
